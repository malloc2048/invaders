#ifndef EMULATOR_HANDLERS_H
#define EMULATOR_HANDLERS_H

#include "intel8080.h"
#include "cpu/8080/instructions/instructions.h"

//void (*handlers[256])(State8080 *state, const uint8_t *opcode) = {
//    NoOp,	// 0X00
//    LXIB,	// 0X00
//    STAXB,	// 0X02
//    INXB,	// 0X03
//    INRB,	// 0X04
//    DCRB,	// 0X05
//    MVIB,	// 0X06
//    RLC,	// 0X07
//    UnimplementedInstruction,	// 0X08
//    DADB,	// 0X09
//    LDAXB,	// 0X0A
//    DCXB,	// 0X0B
//    INRC,	// 0X00
//    DCRC,	// 0X0D
//    MVIC,	// 0X0E
//    RRC,	// 0X0F
//    UnimplementedInstruction,	// 0X10
//    LXID,	// 0X11
//    STAXD,	// 0X12
//    INXD,	// 0X13
//    INRD,	// 0X14
//    DCRD,	// 0X15
//    MVID,	// 0X16
//    RAL,	// 0X17
//    UnimplementedInstruction,	// 0X18
//    DADD,	// 0X19
//    LDAXD,	// 0X1A
//    DCXD,	// 0X1B
//    INRE,	// 0X1C
//    DCRE,	// 0X1D
//    MVIE,	// 0X1E
//    RAR,	// 0X1F
//    UnimplementedInstruction,	// 0X20
//    LXIH,	// 0X21
//    SHLD,	// 0X22
//    INXH,	// 0X23
//    INRH,	// 0X24
//    DCRH,	// 0X25
//    MVIH,	// 0X26
//    DAA,	// 0X27
//    UnimplementedInstruction,	// 0X28
//    DADH,	// 0X29
//    LHLD,	// 0X2A
//    DCXH,	// 0X2B
//    INRL,	// 0X2C
//    DCRL,	// 0X2D
//    MVIL,	// 0X2E
//    CMA,	// 0X2F
//    UnimplementedInstruction,	// 0X30
//    LXISP,	// 0X31
//    STA,	// 0X32
//    INXSP,	// 0X33
//    INRM,	// 0X34
//    DCRM,	// 0X35
//    MVIM,	// 0X36
//    STC,	// 0X37
//    UnimplementedInstruction,	// 0X38
//    DADSP,	// 0X39
//    LDA,	// 0X3A
//    DCXSP,	// 0X3B
//    INRA,	// 0X3C
//    DCRA,	// 0X3D
//    MVIA,	// 0X3E
//    CMC,	// 0X3F
//    MOV_B_B,	// 0X40
//    MOV_B_C,	// 0X41
//    MOV_B_D,	// 0X42
//    MOV_B_E,	// 0X43
//    MOV_B_H,	// 0X44
//    MOV_B_L,	// 0X45
//    MOV_B_M,	// 0X46
//    MOV_B_A,	// 0X47
//    MOV_C_B,	// 0X48
//    MOV_C_C,	// 0X49
//    MOV_C_D,	// 0X4A
//    MOV_C_E,	// 0X4B
//    MOV_C_H,	// 0X4C
//    MOV_C_L,	// 0X4D
//    MOV_C_M,	// 0X4E
//    MOV_C_A,	// 0X4F
//    MOV_D_B,	// 0X50
//    MOV_D_C,	// 0X51
//    MOV_D_D,	// 0X52
//    MOV_D_E,	// 0X53
//    MOV_D_H,	// 0X54
//    MOV_D_L,	// 0X55
//    MOV_D_M,	// 0X56
//    MOV_D_A,	// 0X57
//    MOV_E_B,	// 0X58
//    MOV_E_C,	// 0X59
//    MOV_E_D,	// 0X5A
//    MOV_E_E,	// 0X5B
//    MOV_E_H,	// 0X5C
//    MOV_E_L,	// 0X5D
//    MOV_E_M,	// 0X5E
//    MOV_E_A,	// 0X5F
//    MOV_H_B,	// 0X60
//    MOV_H_C,	// 0X61
//    MOV_H_D,	// 0X62
//    MOV_H_E,	// 0X63
//    MOV_H_H,	// 0X64
//    MOV_H_L,	// 0X65
//    MOV_H_M,	// 0X66
//    MOV_H_A,	// 0X67
//    MOV_L_B,	// 0X68
//    MOV_L_C,	// 0X69
//    MOV_L_D,	// 0X6A
//    MOV_L_E,	// 0X6B
//    MOV_L_H,	// 0X6C
//    MOV_L_L,	// 0X6D
//    MOV_L_M,	// 0X6E
//    MOV_L_A,	// 0X6F
//    MOV_M_B,	// 0X70
//    MOV_M_C,	// 0X71
//    MOV_M_D,	// 0X72
//    MOV_M_E,	// 0X73
//    MOV_M_H,	// 0X74
//    MOV_M_L,	// 0X75
//    HLT,	// 0X76
//    MOV_M_A,	// 0X77
//    MOV_A_B,	// 0X78
//    MOV_A_C,	// 0X79
//    MOV_A_D,	// 0X7A
//    MOV_A_E,	// 0X7B
//    MOV_A_H,	// 0X7C
//    MOV_A_L,	// 0X7D
//    MOV_A_M,	// 0X7E
//    MOV_A_A,	// 0X7F
//    ADDB,	// 0X80
//    ADDC,	// 0X81
//    ADDD,	// 0X82
//    ADDE,	// 0X83
//    ADDH,	// 0X84
//    ADDL,	// 0X85
//    ADDM,	// 0X86
//    ADDA,	// 0X87
//    ADCB,	// 0X88
//    ADCC,	// 0X89
//    ADCD,	// 0X8A
//    ADCE,	// 0X8B
//    ADCH,	// 0X8C
//    ADCL,	// 0X8D
//    ADCM,	// 0X8E
//    ADCA,	// 0X8F
//    SUBB,	// 0X90
//    SUBC,	// 0X91
//    SUBD,	// 0X92
//    SUBE,	// 0X93
//    SUBH,	// 0X94
//    SUBL,	// 0X95
//    SUBM,	// 0X96
//    SUBA,	// 0X97
//    SBBB,	// 0X98
//    SBBC,	// 0X99
//    SBBD,	// 0X9A
//    SBBE,	// 0X9B
//    SBBH,	// 0X9C
//    SBBL,	// 0X9D
//    SBBM,	// 0X9E
//    SBBA,	// 0X9F
//    ANAB,	// 0xA0
//    ANAC,	// 0xA1
//    ANAD,	// 0xA2
//    ANAE,	// 0xA3
//    ANAH,	// 0xA4
//    ANAL,	// 0xA5
//    ANAM,	// 0xA6
//    ANAA,	// 0xA7
//    XRAB,	// 0xA8
//    XRAC,	// 0xA9
//    XRAD,	// 0xAA
//    XRAE,	// 0xAB
//    XRAH,	// 0xAC
//    XRAL,	// 0xAD
//    XRAM,	// 0xAE
//    XRAA,	// 0xAF
//    ORAB,	// 0xB0
//    ORAC,	// 0xB1
//    ORAD,	// 0xB2
//    ORAE,	// 0xB3
//    ORAH,	// 0xB4
//    ORAL,	// 0xB5
//    ORAM,	// 0xB6
//    ORAA,	// 0xB7
//    CMPB,	// 0xB8
//    CMPC,	// 0xB9
//    CMPD,	// 0xBA
//    CMPE,	// 0xBB
//    CMPH,	// 0xBC
//    CMPL,	// 0xBD
//    CMPM,	// 0xBE
//    CMPA,	// 0xBF
//    RNZ,	// 0XC0
//    PopB,	// 0XC1
//    JNZ,	// 0XC2
//    JMP,	// 0XC3
//    CNZ,	// 0XC4
//    PushB,	// 0XC5
//    ADI,	// 0XC6
//    RST0,	// 0XC7
//    RZ,	// 0XC8
//    RET,	// 0XC9
//    JZ,	// 0XCA
//    UnimplementedInstruction,	// 0XCB
//    CZ,	// 0XCC
//    CALL,	// 0XCD
//    ACI,	// 0XCE
//    RST1,	// 0XCF
//    UnimplementedInstruction,	// 0XD0
//    POPD,	// 0XD1
//    JNC,	// 0XD2
//    OUT,	// 0XD3
//    CNC,	// 0XD4
//    PushD,	// 0XD5
//    SUI,	// 0XD6
//    RST2,	// 0XD7
//    RC,	// 0XD8
//    UnimplementedInstruction,	// 0XD9
//    JC,	// 0XDA
//    IN,	// 0XDB
//    CC,	// 0XDC
//    UnimplementedInstruction,	// 0XDD
//    SBI,	// 0XDE
//    RST3,	// 0xDF
//    RPO,	// 0xE0
//    POPH,	// 0xE1
//    JPO,	// 0xE2
//    XTHL,	// 0xE3
//    CPO,	// 0xE4
//    PUSHH,	// 0xE5
//    ANI,	// 0xE6
//    RST4,	// 0xE7
//    RPE,	// 0xE8
//    PCHL,	// 0xE9
//    JPE,	// 0xEA
//    XCHG,	// 0xEB
//    CPE,	// 0xEC
//    UnimplementedInstruction,	// 0xED
//    XRI,	// 0xEE
//    RST5,	// 0xEF
//    RP,	// 0xF0
//    POP_PSW,	// 0xF1
//    JP,	// 0xF2
//    DI,	// 0xF3
//    CP,	// 0xF4
//    PUSH_PSW,	// 0xF5
//    ORI,	// 0xF6
//    RST6,	// 0xF7
//    RM,	// 0xF8
//    SPHL,	// 0xF9
//    JM,	// 0xFA
//    EI,	// 0xFB
//    CM,	// 0xFC
//    UnimplementedInstruction,	// 0xFD
//    CPI,	// 0xFE
//    RST7    // 0xFF
//};
#endif
